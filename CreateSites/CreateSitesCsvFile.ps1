param ([Parameter(Mandatory)]$inputFile, $dryRun=$true)

<#
Takes in an all-employees CSV file (generated by the Ceridian employee importer)
and spits out a sites.xslx file that can be imported using the dovetail site importer

Beware: There's some hard-coded values below. Such as OrgName, and TimeZone

Calling syntax:
	.\CreateSitesCsvFile.ps1 employees.csv

Outputs: 
 	* log file, in the \logs directory
#>


# Global Variables
$global:delimiter = "|";

$global:sites=@();
$global:siteIDs=@{};

<# Log Levels:
    OFF = 0
    ERROR = 1
    WARN = 2
    INFO = 3
    DEBUG = 4
#>
$global:logLevel=4;

# Giddyup

# build the log file name
$thisScript = (Get-Item $PSCommandPath ).Basename;
$FormattedDate = Get-Date -Format "yyyy-MM-dd-HH-mm-ss";
$logFile = "logs\$($thisScript)_$($FormattedDate).log";
# $FormattedDate $LevelText $Message" | Out-File -FilePath $logFile -Append;

##########################
# Log to Console and to a File
##########################
function Write-Log
{
    [CmdletBinding()]
    Param
    (
        [Parameter(Mandatory=$true, ValueFromPipelineByPropertyName=$true)]
        [ValidateNotNullOrEmpty()]
        [Alias("LogContent")]
        [string]$Message,

        [Parameter(Mandatory=$false)]
        [ValidateSet("Error","Warn","Info","Debug")]
        [string]$Level="Info"
    )

	if (!(Test-Path $logFile)) {
    	$NewLogFile = New-Item $logFile -Force -ItemType File
      }

    # Format Date for our Log File
    $FormattedDate = Get-Date -Format "yyyy-MM-dd HH:mm:ss"

    # Write message to error, warning, or verbose pipeline and specify $LevelText
    switch ($Level) {
        'Error' {
	        	if ($global:logLevel -gt 0){
		            Write-Host 'ERROR:' $Message -ForegroundColor Red;
		            $LevelText = 'ERROR:'
		            "$FormattedDate $LevelText $Message" | Out-File -FilePath $logFile -Append
	            }
            }
        'Warn' {
	        	if ($global:logLevel -gt 1){
		            Write-Warning $Message
		            $LevelText = 'WARNING:'
		            "$FormattedDate $LevelText $Message" | Out-File -FilePath $logFile -Append
	            }            
            }
        'Info' {
				if ($global:logLevel -gt 2){
		            Write-Host $Message
		            $LevelText = 'INFO:'
		            "$FormattedDate $LevelText $Message" | Out-File -FilePath $logFile -Append
	            }
            }
         'Debug'{
				if ($global:logLevel -gt 3){
					Write-Host "DEBUG: $Message" -ForegroundColor Blue; 
					$LevelText = 'DEBUG:'
					"$FormattedDate $LevelText $Message" | Out-File -FilePath $logFile -Append
				}
         	}  

        } #end switch
        
} #end function

##################
# Main
##################
If ($null -eq (Get-Module -ListAvailable -Name "Microsoft.PowerShell.Utility")){
	Install-module Microsoft.PowerShell.Utility;
}
If ($null -eq (Get-Module -ListAvailable -Name "ImportExcel")){
	Install-module ImportExcel;
}

$states = Import-Csv -Path States.csv;
write-log "Successfully read states data from csv file. Number of data rows: $($states.count)" -Level "Info";

write-log "Reading data from csv file: $($inputFile)" -Level "Info";


$csv = Import-Csv -Path $inputFile -Delimiter $global:delimiter;

write-log "Successfully read data from csv file. Number of data rows: $($csv.count)" -Level "Info";

foreach ($row in $csv){	

	if( ! $global:siteIDs.ContainsKey($row.SiteID)) {

		# Handle missing data	
		$address = $row.Address1; if (!$address){$address="x"}
		$city = $row.City; if (!$city){$city="x"}
		$postalCode = $row."Postal Code"; if (!$postalCode){$postalCode="x"}
		$state = $row.State; if (!$state){$state="x"}
		$country = $row.Country; if (! $country){$country = "United States";$state = "TX";}

		# attempt to lookup the state 		
		$stateLookup = $states | Where-Object -Property displayedText -Eq $state;
		if (! $stateLookup){
			$stateLookup = $states | Where-Object -Property displayedText -Like "*- $state";
		}

		# FFS; this is so hacky. 
		if ($stateLookup){ $state = $stateLookup.key;}
		else {$country = "United States";$state = "TX";}

		$site = [pscustomobject]@{
			Identifier = $row.SiteID
			Name = $row.SiteID
			"Address 1" = $address;
			City = $city
			"State or Province" = $state
			Country = $country 
			"Postal Code" = $postalCode	
			"Timezone ID" = "Central Standard Time"
			"Org Name" = "Ceridian"
			"Work Calendar" = ""
			"Portal Chat Enabled" = "True" 
		};
	
		$global:siteIDs.Add($row.SiteID, $site);
		$global:sites+= $site;
	}
}

write-log "Successfully read data from csv file. Number of unique sites rows: $($global:sites.count)" -Level "Info";

# export to CSV
# $global:sites | Export-Csv -Path "sites.csv" -NoTypeInformation

# export to Excel
$global:sites | Export-Excel -Path "sites.xlsx" -WorksheetName Data


